#include <caffe/caffe.hpp>
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/contrib/contrib.hpp>
#include <algorithm>
#include <iosfwd>
#include <memory>
#include <string>
#include <utility>
#include <vector>
#include <iostream>

using namespace caffe;  // NOLINT(build/namespaces)
using std::string;
using namespace std;
using namespace cv;

typedef std::pair<string, int> Prediction; //<labels_, index_>

class Classifier 
{
public:
	Classifier(const string& model_file, 
		   const string& trained_file, 
		   const string& label_file);

	std::vector<Prediction> Classify(const cv::Mat& img, int N = 1);

private:
	void SetMean();

	std::vector<float> Predict(const cv::Mat& img);

	std::vector<int> Argmax(const std::vector<float>& v, int N);

	void WrapInputLayer(std::vector<cv::Mat>* input_channels);

	void Preprocess(const cv::Mat& img, std::vector<cv::Mat>* input_channels);

private:
	shared_ptr<Net<float> > net_;
	cv::Size input_geometry_;
	int num_channels_;
	cv::Mat mean_;
	std::vector<string> labels_;
};

Classifier::Classifier(const string& model_file, 
		       const string& trained_file,
		       const string& label_file) 
{

#ifdef CPU_ONLY
	Caffe::set_mode(Caffe::CPU);
#else
	Caffe::set_mode(Caffe::GPU);
#endif

	/* Load the network. */
	net_.reset(new Net<float>(model_file, TEST));
	net_->CopyTrainedLayersFrom(trained_file);

	CHECK_EQ(net_->num_inputs(), 1) << "Network should have exactly one input.";
	CHECK_EQ(net_->num_outputs(), 1) << "Network should have exactly one output.";

	Blob<float>* input_layer = net_->input_blobs()[0];
	num_channels_ = input_layer->channels();
	CHECK(num_channels_ == 3 || num_channels_ == 1)
		<< "Input layer should have 1 or 3 channels.";
	input_geometry_ = cv::Size(input_layer->width(), input_layer->height());

	/* Load the binaryproto mean file. */
	SetMean();

	/* Load labels. */
	std::ifstream labels(label_file.c_str());
	CHECK(labels) << "Unable to open labels file " << label_file;
	string line;
	while (std::getline(labels, line))
		labels_.push_back(string(line));

	Blob<float>* output_layer = net_->output_blobs()[0];
}

std::vector<int> Classifier::Argmax(const std::vector<float>& v, int N) 
{
	// specify capacity
	Blob<float>* output_layer = net_->output_blobs()[0];
	int output_channels = output_layer->channels();
	int output_size = output_layer->height() * output_layer->width();

	std::vector<int> result;
	result.reserve(output_size);
	for (int i = 0; i < output_size; ++i)
	{
		// storage
		std::vector<int> pairs;
		pairs.resize(output_channels);
		for (size_t j = 0; j < output_channels; ++j)
			pairs[j] = v[j*output_size+i]; //each channels a Mat single
		// sort
		int idx = -1;
		float maxProb = FLT_MIN;
		for (int c = 0; c < output_channels; ++c) {
			if (pairs[c] > maxProb) {
				maxProb = pairs[c];
				idx = c;
			}
		}

		result.push_back(idx); //N=1
	}
	return result;
}

/* Return the top N predictions. */
std::vector<Prediction> Classifier::Classify(const cv::Mat& img, int N) 
{
	std::vector<float> output = Predict(img);
	std::vector<int> maxN = Argmax(output, N);

	std::vector<Prediction> predictions;
	predictions.reserve(input_geometry_.height * input_geometry_.width);
	for (int i = 0; i < input_geometry_.height * input_geometry_.width; ++i)
	{
		int idx = maxN[i];
		predictions.push_back(std::make_pair(labels_[idx], idx));
	}
	
	return predictions;
}

/* Load the mean file in binaryproto format. */
void Classifier::SetMean() 
{
	mean_ = cv::Mat(input_geometry_, CV_32FC3, cv::Scalar(104.00698793, 116.66876762, 122.67891434)); //BGR
}

std::vector<float> Classifier::Predict(const cv::Mat& img) 
{
	Blob<float>* input_layer = net_->input_blobs()[0];
	input_layer->Reshape(1, num_channels_, input_geometry_.height, input_geometry_.width);
	/* Forward dimension change to all layers. */
	net_->Reshape();

	std::vector<cv::Mat> input_channels;
	WrapInputLayer(&input_channels);

	Preprocess(img, &input_channels);

	net_->ForwardPrefilled();

	/* Copy the output layer to a std::vector */
	Blob<float>* output_layer = net_->output_blobs()[0];
	
	const float* begin = output_layer->cpu_data();
	const float* end = begin + output_layer->height() * output_layer->width() * output_layer->channels();
	return std::vector<float>(begin, end);
}

/* Wrap the input layer of the network in separate cv::Mat objects
 * (one per channel). This way we save one memcpy operation and we
 * don't need to rely on cudaMemcpy2D. The last preprocessing
 * operation will write the separate channels directly to the input
 * layer. */
void Classifier::WrapInputLayer(std::vector<cv::Mat>* input_channels) 
{
	Blob<float>* input_layer = net_->input_blobs()[0];

	int width = input_layer->width();
	int height = input_layer->height();
	float* input_data = input_layer->mutable_cpu_data();
	for (int i = 0; i < input_layer->channels(); ++i) 
	{
		cv::Mat channel(height, width, CV_32FC1, input_data);
		input_channels->push_back(channel);
		input_data += width * height;
	}
}

void Classifier::Preprocess(const cv::Mat& img, std::vector<cv::Mat>* input_channels) 
{
	/* Convert the input image to the input image format of the network. */
	cv::Mat sample;
	if (img.channels() == 3 && num_channels_ == 1)
		cv::cvtColor(img, sample, CV_BGR2GRAY);
	else if (img.channels() == 4 && num_channels_ == 1)
		cv::cvtColor(img, sample, CV_BGRA2GRAY);
	else if (img.channels() == 4 && num_channels_ == 3)
		cv::cvtColor(img, sample, CV_BGRA2BGR);
	else if (img.channels() == 1 && num_channels_ == 3)
		cv::cvtColor(img, sample, CV_GRAY2BGR);
	else
		sample = img;

	cv::Mat sample_resized;
	if (sample.size() != input_geometry_)
		cv::resize(sample, sample_resized, input_geometry_);
	else
		sample_resized = sample;

	cv::Mat sample_float;
	if (num_channels_ == 3)
		sample_resized.convertTo(sample_float, CV_32FC3);
	else
		sample_resized.convertTo(sample_float, CV_32FC1);

	cv::Mat sample_normalized;
	cv::subtract(sample_float, mean_, sample_normalized);

	/* This operation will write the separate BGR planes directly to the
	* input layer of the network because it is wrapped by the cv::Mat
	* objects in input_channels. */
	cv::split(sample_normalized, *input_channels);

	CHECK(reinterpret_cast<float*>(input_channels->at(0).data) == net_->input_blobs()[0]->cpu_data())
		<< "Input channels are not wrapping the input layer of the network.";
}

int main(int argc, char** argv) 
{
	// Load network
	string model_file = "/home/inin/caffe-future/examples/fcn-32s/deploy/deploy.prototxt";
	string trained_file = "/home/inin/caffe-future/examples/fcn-32s/model/fcn-32s-pascalcontext.caffemodel";
	string label_file = "/home/inin/caffe-future/examples/fcn-32s/59_labels.txt";
	Classifier classifier(model_file, trained_file, label_file);

	// Load image
	string file = "/home/inin/caffe-future/examples/fcn-32s/pic/2008_000086.jpg";
	cv::Mat img = cv::imread(file, 1);
	cv::resize(img, img, Size(500,500));
	CHECK(!img.empty()) << "Unable to decode image " << file;
	printf("Load image successfully.\n");
	
	double time = double(getTickCount());
	// Prediction
	std::vector<Prediction> predictions = classifier.Classify(img);
	time = double(getTickCount() - time) / getTickFrequency() * 1000;
	cout << "cost : " << time << endl;

	// Display
	Mat fcn(img.size(), CV_8UC1, Scalar(0));
	std::vector<int> unique_label;
	unique_label.reserve(img.rows*img.cols);
	for (int i = 0; i < img.rows; ++i)
	{	
		uchar* fcn_ptr = fcn.ptr<uchar>(i);
		for (int j = 0; j < img.cols; ++j)
		{
			fcn_ptr[j] = predictions[i*img.cols+j].second;
			unique_label.push_back(predictions[i*img.cols+j].second);
		}
	}
	double minVal;
	double maxVal;
	minMaxLoc(fcn, &minVal, &maxVal);
	double range = maxVal - minVal;
	fcn.convertTo(fcn, CV_8UC1, 1.0/range*255.0, -minVal/range*255.0);
	Mat disp;
	applyColorMap(fcn, disp, COLORMAP_JET);

	// Load labels
	std::vector<string> labels_;
	std::ifstream labels(label_file.c_str());
	CHECK(labels) << "Unable to open labels file " << label_file;
	string line;
	while (std::getline(labels, line))
		labels_.push_back(string(line));
	sort(unique_label.begin(), unique_label.end());
	vector<int>::iterator iter = unique(unique_label.begin(), unique_label.end());
	unique_label.erase(iter, unique_label.end());

	int width = img.cols*2;
	int height = 30;
	Mat legend(height, width, CV_8UC1, Scalar(0));
	int cellWidth = width / unique_label.size();
	for (int h = 0; h < height; ++h)
	{
		uchar* legend_ptr = legend.ptr<uchar>(h);
		for (int w = 0; w < width; ++w)
		{
			for (int c = 0; c < unique_label.size(); ++c)
			{
				if (w<cellWidth*(c+1) && w>=cellWidth*c) legend_ptr[w] = unique_label[c];
			}
		}
	}
	legend.convertTo(legend, CV_8UC1, 1.0/range*255.0, -minVal/range*255.0);
	Mat legend_colormap;
	applyColorMap(legend, legend_colormap, COLORMAP_JET);

	for (int i = 0; i < unique_label.size(); ++i)
	{
		string words = labels_[unique_label[i]].c_str();
		putText(legend_colormap, words, Point(cellWidth*i+cellWidth/3,height/1.5), CV_FONT_HERSHEY_COMPLEX, 0.5, Scalar(255,255,255));	
	}	
	
	Mat vecMat;
	hconcat(img, disp, vecMat);
	vconcat(vecMat, legend_colormap, vecMat);
	imshow("vecMat", vecMat);

	waitKey(0);
	return 0;
}


